version: '3.8'
services:
  rabbitmq:
    image: rabbitmq:3-management
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 30s
      retries: 30
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PASSWORD}
    networks:
      - app-network

  app:
    # image: 사전 빌드한 이미지 혹은 허브 이미지
    build:
      context: .
      dockerfile: Dockerfile.fastapi
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/api/v1')"]
      interval: 10s
      timeout: 30s
      retries: 30
    environment:
      - APP_DOMAIN=${APP_DOMAIN}
      - APP_JWT_SECRET_KEY=${APP_JWT_SECRET_KEY}
      - APP_JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${APP_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - APP_JWT_REFRESH_TOKEN_EXPIRE_MINUTES=${APP_JWT_REFRESH_TOKEN_EXPIRE_MINUTES}
      - OAUTH_TOKEN_URL=${OAUTH_TOKEN_URL}
      - PASSWORD_ALGORITHM=${PASSWORD_ALGORITHM}
      - RDBMS_DRIVER=${RDBMS_DRIVER}
      - RDBMS_HOST_NAME=${RDBMS_HOST_NAME}
      - RDBMS_USERNAME=${RDBMS_USERNAME}
      - RDBMS_ROOT_PASSWORD=${RDBMS_ROOT_PASSWORD}
      - RDBMS_PASSWORD=${RDBMS_PASSWORD}
      - RDBMS_DB_NAME=${RDBMS_DB_NAME}
      - CELERY_RESULT_BACKEND_FILE_NAME=${CELERY_RESULT_BACKEND_FILE_NAME}
      - REDIS_HOST_NAME=${REDIS_HOST_NAME}
      - REDIS_PORT=${REDIS_PORT}
      - RABBITMQ_HOST_NAME=${RABBITMQ_HOST_NAME}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - FASTAPI_QUEUE_NAME=${FASTAPI_QUEUE_NAME}
      - MONGODB_HOST_NAME=${MONGODB_HOST_NAME}
      - MONGODB_PORT=${MONGODB_PORT}
      - SMTP_ACCOUNT=${SMTP_ACCOUNT}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - SMTP_DOMAIN=${SMTP_DOMAIN}
      - SMTP_PORT=${SMTP_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    command: >
      /bin/bash -c "/code/app/app_init.sh"
    volumes:
      - ./volume/alembic_migrations/:/code/app/alembic_migrations
      - ./volume/database/:/code/app/volume/database/
      - ./volume/ai_model_store/:/code/app/volume/ai_model_store/
      - ./volume/staticfile/:/code/app/volume/staticfile/
      - ./volume/log/app/:/code/app/volume/log/
    networks:
      - app-network

  celery:
    # image: 사전 빌드한 이미지 혹은 허브 이미지
    build:
      context: .
      dockerfile: Dockerfile.celery
    environment:
      - APP_JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${APP_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - CELERY_RESULT_BACKEND_FILE_NAME=${CELERY_RESULT_BACKEND_FILE_NAME}
      - REDIS_HOST_NAME=${REDIS_HOST_NAME}
      - REDIS_PORT=${REDIS_PORT}
      - RABBITMQ_HOST_NAME=${RABBITMQ_HOST_NAME}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - FASTAPI_QUEUE_NAME=${FASTAPI_QUEUE_NAME}
      - MONGODB_HOST_NAME=${MONGODB_HOST_NAME}
      - MONGODB_PORT=${MONGODB_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      app:
        condition: service_healthy
    command: /bin/bash -c "python celery_worker.py"
    volumes:
      - ./volume/database/:/code/celery_docker/volume/database/
      - ./volume/ai_model_store/:/code/celery_docker/volume/ai_model_store/
      - ./volume/staticfile/:/code/celery_docker/volume/staticfile/
    networks:
      - app-network

  celery_beat:
    # image: 사전 빌드한 이미지 혹은 허브 이미지
    build:
      context: .
      dockerfile: Dockerfile.celery
    environment:
      - APP_JWT_ACCESS_TOKEN_EXPIRE_MINUTES=${APP_JWT_ACCESS_TOKEN_EXPIRE_MINUTES}
      - CELERY_RESULT_BACKEND_FILE_NAME=${CELERY_RESULT_BACKEND_FILE_NAME}
      - REDIS_HOST_NAME=${REDIS_HOST_NAME}
      - REDIS_PORT=${REDIS_PORT}
      - RABBITMQ_HOST_NAME=${RABBITMQ_HOST_NAME}
      - RABBITMQ_USERNAME=${RABBITMQ_USERNAME}
      - RABBITMQ_PASSWORD=${RABBITMQ_PASSWORD}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - FASTAPI_QUEUE_NAME=${FASTAPI_QUEUE_NAME}
      - MONGODB_HOST_NAME=${MONGODB_HOST_NAME}
      - MONGODB_PORT=${MONGODB_PORT}
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      mysql:
        condition: service_healthy
      app:
        condition: service_healthy
      celery:
        condition: service_started
    command: /bin/bash -c "python celery_beat.py"
    volumes:
      - ./volume/database/:/code/celery_docker/volume/database/
      - ./volume/ai_model_store/:/code/celery_docker/volume/ai_model_store/
      - ./volume/staticfile/:/code/celery_docker/volume/staticfile/
    networks:
      - app-network

  mysql:
    image: mysql:8.0
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 30s
      retries: 30
    environment:
      - MYSQL_ROOT_PASSWORD=${RDBMS_ROOT_PASSWORD}
      - MYSQL_DATABASE=${RDBMS_DB_NAME}
      - MYSQL_USER=${RDBMS_USERNAME}
      - MYSQL_PASSWORD=${RDBMS_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - ./volume/database:/var/lib/mysql
    networks:
      - app-network

  nginx:
    build:
      context: .
      dockerfile: Dockerfile.nginx
    ports:
      - "80:80"
    depends_on:
      - app
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./volume/log/nginx/:/var/log/nginx/
    networks:
      - app-network

  redis:
    image: redis:latest
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 30s
      retries: 30
    depends_on:
      mysql:
        condition: service_healthy
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - ./volume/redis:/data
    networks:
      - app-network

  mongodb:
    image: mongo:latest
    healthcheck:
      test: echo 'db.runCommand("ping").ok'
      interval: 10s
      timeout: 30s
      retries: 30
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - ./volume/mongodb:/data/db
    networks:
      - app-network

networks:
  app-network:
    driver: bridge